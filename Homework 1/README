Student Name	: Ozan Åželte
Student No	: 161044061

ShowDivisibleNumbers:
	It works like the Homework #1 PDF.

BinarySearch:
	It will not give any errors if the array do not contains the wanted
	number, so the wanted number must be added to the array. It prints
	the index and the number that it looked at.
	nums	: The array
	ncnt	: Numbers count of the array
	wntd	: The wanted number which we want to find

LinearSearch:
	It will not give any errors if the array do not contains the wanted
	number, so the wanted number must be added to the array.It prints
	the number that it looked at.
	nums	: The array
	ncnt	: Numbers count of the array
	wntd	: The wanted number which we want to find

SelectionSort:
	It works like the Homework #1 PDF. You can change the unsorted array.
	It prints the minimum number it finds and the array after swap.
	ncnt	: Numbers count of the array
	nums	: The unsorted array

CREATE_PROCESS_SYSCALL:
	It saves the variables in mem.cpp, calls reinitialize, loads give
	assembly file. After that loads old data and returs the shell again.
	For this syscall two functions added to the syscall.cpp and syscall.h.
	void create_process_syscall()	: The main syscall function which
		called by switch-case statement.
	void reinit_cp()		: It just calls initialize_world and
		initialize_run_stack

Shell:
	Gets the path of an asm file and runs it like the Fig. 1-19. When it
	gets the "ex" string it exits from the shell.
	OZAN-OS> LinearSearch.asm
	23
	91
	16
	12
	72
	OZAN-OS> BinarySearch.asm
	6=>49
	10=>81
	8=>67
	7=>53
	OZAN-OS> SelectionSort.asm
	2
	2 91 16 12 72 5 8 56 23 38 
	5
	2 5 16 12 72 91 8 56 23 38 
	8
	2 5 8 12 72 91 16 56 23 38 
	12
	2 5 8 12 72 91 16 56 23 38 
	16
	2 5 8 12 16 91 72 56 23 38 
	23
	2 5 8 12 16 23 72 56 91 38 
	38
	2 5 8 12 16 23 38 56 91 72 
	56
	2 5 8 12 16 23 38 56 91 72 
	72
	2 5 8 12 16 23 38 56 72 91 
	91
	2 5 8 12 16 23 38 56 72 91 
	OZAN-OS> ShowDivisibleNumbers.asm
	(input)10
	(input)20
	(input)3
	12
	15
	18
	OZAN-OS> ex